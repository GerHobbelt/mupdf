#!/usr/bin/env python

"""
Generates a list of all exports from libmupdf.dll from the function lists
contained in the mupdf/include/* headers (only MuPDF and MuXPS are included)
and adds exports for the other libraries contained within libmupdf.dll but
used by SumatraPDF-no-MuPDF.exe (unarr, libdjvu, zlib, lzma, libwebp).
"""

import os, re

def generateExports(header, exclude=[]):
	if os.path.isdir(header):
		return "\n".join([generateExports(os.path.join(header, file), exclude) for file in os.listdir(header)])

	data = open(header, "r").read()
	data = re.sub(r"(?sm)^#ifndef NDEBUG\s.*?^#endif", "", data, 0)
	data = re.sub(r"(?sm)^#ifdef ARCH_ARM\s.*?^#endif", "", data, 0)
	data = re.sub(r"(?sm)^#ifdef FITZ_DEBUG_LOCKING\s.*?^#endif", "", data, 0)
	data = data.replace(" FZ_NORETURN;", ";")
	functions = re.findall(r"(?sm)^\w+\*?\*? (?:\w+\*?\*? )?\*?\*?(\w+)\(.*?\);", data)
	return "\n".join(["\t" + name for name in functions if name not in exclude])

def collectFunctions(file):
	data = open(file, "r").read()
	return re.findall(r"(?sm)^\w+(?: \*\n|\n| \*| )((?:fz_|pdf_|xps_)\w+)\(", data)

def generateExportsJpeg(file, exclude=[], include=[]):
	data = open(file, "r").read()
	data = re.sub(r"(?sm)^\s*JMETHOD\([^\)]*\)", "", data, 0)
	data = re.sub(r"(?sm)[\s\r\n]+JPP\([^\)]*\)", "(XXXXX)", data, 0)
	functions = re.findall(r"(?sm)^EXTERN\([^)]+\) (\w+)\s*\(XXXXX\)", data)
	return "\n".join(["\t" + name for name in functions if name not in exclude]) + "\n" + "\n".join(["\t" + name for name in include])

LIBMUPDF_DEF = """\
; This file is auto-generated by gen_libmupdf.def.py

LIBRARY MuPDFLib

EXPORTS

; MuPDF tool exports

%(tool_exports)s

; Tesseract OCR exports

%(ocr_exports)s

%(ocr_train_exports)s

; curl exports

%(curl_exports)s

%(curl_time_exports)s

	curlx_win32_open
	curlx_win32_stat
	curlx_win32_fopen
	curlx_win32_access

; platform exports

%(platform_exports)s

; helpers exports

%(helpers_exports)s

; Fitz Documents exports

%(pubdoc_exports)s

; Fitz exports

	; data, not a function:
	fz_identity

	fz_optarg
	fz_optind

	fz_infinite_rect
	fz_empty_rect
	fz_invalid_rect
	fz_unit_rect
	fz_infinite_irect
	fz_empty_irect
	fz_invalid_irect
	fz_unit_bbox

%(fitz_exports)s

; MuPDF exports

%(mupdf_exports)s

; libJPEG exports

%(libjpeg_exports)s

; libGIF exports

%(libgif_exports)s

; libWEBP exports

%(libwebp_exports)s

; libSQLite3 exports

%(libsqlite3_exports)s

; monolithic tool exports

	dwebp_main
	vwebp_sdl_main
	webp_quality_main
	vwebp_main
	cwebp_main
	img2webp_main
	webp_anim_diff_main
	webp_get_disto_main
	gif2webp_main
	webp_anim_dump_main
	webpmux_main
	webpinfo_main

"""

def main():
	os.chdir(os.path.join(os.path.dirname(__file__), "../.."))

	# don't include/export doc_* functions, support for additional input/output formats and form support
	doc_exports = collectFunctions("source/fitz/document-all.c") + ["fz_log_dump_store"]
	more_formats = []
	form_exports = collectFunctions("source/pdf/pdf-form.c") + collectFunctions("source/pdf/pdf-event.c") + collectFunctions("source/pdf/pdf-appearance.c")
	misc_exports = ["fz_valgrind_pixmap", "track_usage", "fz_error_print_callback"]
	sign_exports = ["pdf_crypt_buffer", "pdf_read_pfx", "pdf_sign_signature", "pdf_signer_designated_name", "pdf_free_designated_name"]

	fitz_exports = generateExports("include/mupdf/fitz", doc_exports + more_formats + misc_exports)
	pubdoc_exports = generateExports("include/mupdf/fitz/document.h")
	mupdf_exports = generateExports("include/mupdf/pdf", sign_exports + ["pdf_drop_designated_name", "pdf_print_xref", "pdf_recognize", "pdf_resolve_obj", "pdf_open_compressed_stream", "pdf_finish_edit"])
	tool_exports = generateExports("include/mupdf/mutool.h")
	ocr_exports = generateExports("source/fitz/tessocr.h")
	ocr_train_exports = generateExports("thirdparty/tesseract/include/tesseract/capi_training_tools.h")
	curl_exports = generateExports("thirdparty/curl/include/curl", ["fread", "fwrite", "strcasecmp", "strncasecmp"])
	curl_time_exports = generateExports("thirdparty/curl/lib/timeval.h")
	platform_exports = generateExports("platform/x11/curl_stream.h")
	office_exports = generateExports("include/mupdf/helpers/mu-office-lib.h")
	pkcs7ex_exports = generateExports("include/mupdf/helpers/pkcs7-openssl.h")
	helpers_exports = generateExports("include/mupdf/helpers", office_exports + pkcs7ex_exports)
	libjpeg_exports = generateExportsJpeg("thirdparty/libjpeg/jpeglib.h", [], ["jpeg_cust_mem_init"])
	libgif_exports = generateExports("thirdparty/owemdjee/libgif/gif_lib.h")
	libwebp_exports = generateExports("thirdparty/owemdjee/libwebp/src/webp")
	libsqlite3_exports = generateExports("thirdparty/owemdjee/sqlite-amalgamation/sqlite3.h", ["sqlite3_activate_cerod", "sqlite3_enable_shared_cache"])

	list = LIBMUPDF_DEF % locals()
	# remove duplicate entries
	lines = list.splitlines()
	new_lines = []
	empties = 0
	for line in lines:
		# Strip white spaces
		str = line.strip()
		if not str:
			empties = empties + 1
			if empties < 2:
				new_lines.append(str)
		else:
			empties = 0
			if line not in new_lines:
				new_lines.append(line)
	list = "\n".join(new_lines)
	list = list.replace("\n", "\r\n")
	open("platform/win32/libmupdf.def", "wb").write(list.encode('utf8'))

if __name__ == "__main__":
	main()
