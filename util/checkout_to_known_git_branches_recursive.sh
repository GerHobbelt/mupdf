#! /bin/bash
#
# Generated by the utility: ../../../util/collect_git_checked_out_branch_recusively.sh 
#
# Checkout each git repository to the given branch/commit or list them
#

mode=h;
while getopts ":hlc" opt ; do
  #echo opt+arg = "$opt$OPTARG"
  case "$opt$OPTARG" in
  l )
    mode=h;
    ;;

  c )
    mode=c;
    ;;

  r )
    mode=r;
    ;;

  * )
    cat <<EOH
checkout_to_known_git_branches_recursive.sh options

Options:

-h      : print this help 
-l      : LIST the branch/commit for each git repository (directory) registered in this script.
-c      : CHECKOUT each git repository to the BRANCH registered in this script.
-r      : CHECKOUT/REVERT each git repository to the COMMIT registered in this script.

Note:

Use the '-r' option to set each repository to an exact commit position, which is useful if,
for instance, you wish to reproduce this registered previous software state (which may 
represent a software release) which you wish to analyze/debug.

EOH
    exit 1;
    ;;
  esac
done

if test "$mode" = "h" ; then
  cat <<EOH

Git repository directory                    :: commit hash                         / branch name
--------------------------------------------::--------------------------------------------------
EOH
fi



# args: DIR COMMIT [BRANCH]
git_repo_checkout_branch() {
  if test "$mode" = "c" || test "$mode" = "r" ; then
    if test -d "$1" ; then
      pushd "$1"                                                               2> /dev/null  > /dev/null
      if test "$mode" = "c" ; then
        if test -n "$3" ; then
          # make sure the branch is created locally and is a tracking branch:
          git branch --track "$3" "remotes/origin/$3"                            2> /dev/null  > /dev/null
          git checkout "$3"
        else
          git checkout master
        fi
      else
        git checkout "$2"
      fi
      popd                                                                     2> /dev/null  > /dev/null
    fi
  else
    if test -d "$1" ; then
      printf "%-43s :: %s / %s\n" "$1" "$2" "$3"
    else
      printf "%-43s :: %s / %s\n" "[DIRECTORY DOES NOT EXIST!] $1" "$2" "$3"
    fi
  fi
}


#
# Make sure we switch to the utility directory as all the relative paths for the repositories
# are based off that path!
#
pushd $(dirname $0)                                                            2> /dev/null  > /dev/null



#
# The registered repositories:
#

git_repo_checkout_branch "../../../CS/MuPDF/thirdparty/curl" 02645232dd7df70eb9a43b9779397ada9d9975bc mupdf
git_repo_checkout_branch "../../../CS/MuPDF/thirdparty/freeglut" 96997e7d7b6ee63f624fcf0ad36aa9a4fd7d4639 master
git_repo_checkout_branch "../../../CS/MuPDF/thirdparty/freetype" c3c34ef14aeb9c7ecc998d382c87369c1e8c78e7 mupdf
git_repo_checkout_branch "../../../CS/MuPDF/thirdparty/gumbo-parser" 91075ac371c4e736b91295890cb8c38bce4c1baf mupdf
git_repo_checkout_branch "../../../CS/MuPDF/thirdparty/harfbuzz" 4c64e6e731979d2b7b1258e4d23e767e18e3edfc mupdf
git_repo_checkout_branch "../../../CS/MuPDF/thirdparty/jbig2dec" 04a59bf3cf4c2b06d0d0714ba1a62aee9db2525b master
git_repo_checkout_branch "../../../CS/MuPDF/thirdparty/lcms2" 5a641af5dca56503990bc4d408814eb5b90b9fc4 mupdf
git_repo_checkout_branch "../../../CS/MuPDF/thirdparty/leptonica" 92c016d7788690bb6404729900aa3131b30fa8fe mupdf
git_repo_checkout_branch "../../../CS/MuPDF/thirdparty/libjpeg" 2727a4365ae480ecda656e8372f4c782c8dcc2df master
git_repo_checkout_branch "../../../CS/MuPDF/thirdparty/mujs" 2704d8835b65b354b2411f560f9c90aa3842492a mupdf
git_repo_checkout_branch "../../../CS/MuPDF/thirdparty/openjpeg" 8b8de53dc38642cc3f57596db2672e9f3a40f357 mupdf
git_repo_checkout_branch "../../../CS/MuPDF/thirdparty/tesseract" 64d2618c1d4aa1f55e5ad1fcf5672d7866613115 mupdf
git_repo_checkout_branch "../../../CS/MuPDF/thirdparty/tesseract/abseil" 7ba8cdb56df3bf4fe4ab4606f3fe4b2ab825afac master
git_repo_checkout_branch "../../../CS/MuPDF/thirdparty/tesseract/googletest" 7b1cf6dd5fbe0c22c5e638fce8caf7f0f5c1abbf master
git_repo_checkout_branch "../../../CS/MuPDF/thirdparty/tesseract/test" e27d9566917d7d167636a7d0cd59bcfb2c61c7eb master
git_repo_checkout_branch "../../../CS/MuPDF/thirdparty/zlib" 41b5852eba5825bd41900df01ffc8431c56eae31 master

# --- all done ---

popd                                                                           2> /dev/null  > /dev/null

