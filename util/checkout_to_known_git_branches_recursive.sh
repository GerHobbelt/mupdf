#! /bin/bash
#
# Generated by the utility: ../../../util/collect_git_checked_out_branch_recusively.sh 
#
# Checkout each git repository to the given branch/commit or list them
#

mode=h;
while getopts ":hlc" opt ; do
  #echo opt+arg = "$opt$OPTARG"
  case "$opt$OPTARG" in
  l )
    mode=h;
    ;;

  c )
    mode=c;
    ;;

  r )
    mode=r;
    ;;

  * )
    cat <<EOH
checkout_to_known_git_branches_recursive.sh options

Options:

-h      : print this help 
-l      : LIST the branch/commit for each git repository (directory) registered in this script.
-c      : CHECKOUT each git repository to the BRANCH registered in this script.
-r      : CHECKOUT/REVERT each git repository to the COMMIT registered in this script.

Note:

Use the '-r' option to set each repository to an exact commit position, which is useful if,
for instance, you wish to reproduce this registered previous software state (which may 
represent a software release) which you wish to analyze/debug.

EOH
    exit 1;
    ;;
  esac
done

if test "$mode" = "h" ; then
  cat <<EOH

Git repository directory                    :: commit hash                         / branch name
--------------------------------------------::--------------------------------------------------
EOH
fi



# args: DIR COMMIT [BRANCH]
git_repo_checkout_branch() {
  if test "$mode" = "c" || test "$mode" = "r" ; then
    if test -d "$1" ; then
      pushd "$1"                                                               2> /dev/null  > /dev/null
      if test "$mode" = "c" ; then
        if test -n "$3" ; then
          # make sure the branch is created locally and is a tracking branch:
          git branch --track "$3" "remotes/origin/$3"                            2> /dev/null  > /dev/null
          git checkout "$3"
        else
          git checkout master
        fi
      else
        git checkout "$2"
      fi
      popd                                                                     2> /dev/null  > /dev/null
    fi
  else
    if test -d "$1" ; then
      printf "%-43s :: %s / %s\n" "$1" "$2" "$3"
    else
      printf "%-43s :: %s / %s\n" "[DIRECTORY DOES NOT EXIST!] $1" "$2" "$3"
    fi
  fi
}


#
# Make sure we switch to the utility directory as all the relative paths for the repositories
# are based off that path!
#
pushd $(dirname $0)                                                            2> /dev/null  > /dev/null



#
# The registered repositories:
#

git_repo_checkout_branch "../../../CS/MuPDF/thirdparty/curl" e438f3f36b68eb66cc6f53da779afb06988b1d6d mupdf
git_repo_checkout_branch "../../../CS/MuPDF/thirdparty/freeglut" 59a29ed67725a3c15fc464747e01902ba44da3de master
git_repo_checkout_branch "../../../CS/MuPDF/thirdparty/freetype" 24df965835afb009f5eb5dc238ed4205b8992de6 mupdf
git_repo_checkout_branch "../../../CS/MuPDF/thirdparty/gumbo-parser" 3702df8d70c55b6a8b2f645f92a06c3c5339206e master
git_repo_checkout_branch "../../../CS/MuPDF/thirdparty/gumbo-parser/testdata" e633ddfeb0180f71238763576b1f5fdd26a7038f 
git_repo_checkout_branch "../../../CS/MuPDF/thirdparty/gumbo-parser/third_party/gtest" 1cb04aa3e99c736bbd1eb90ebda3d6117355aacc 
git_repo_checkout_branch "../../../CS/MuPDF/thirdparty/harfbuzz" 9e9f96e163ec6f15ef6b31e2688383995d82de4b master
git_repo_checkout_branch "../../../CS/MuPDF/thirdparty/jbig2dec" ea25cb46572453427fb4461d4e41e2a6532a443a master
git_repo_checkout_branch "../../../CS/MuPDF/thirdparty/lcms2" 40cf05c1875ba6af3fec2b4ff0353f7a26140ea6 master
git_repo_checkout_branch "../../../CS/MuPDF/thirdparty/leptonica" dc102aa84222d2577ec06f63b330b69ca1be0468 master
git_repo_checkout_branch "../../../CS/MuPDF/thirdparty/libjpeg" 2cb9121a49129a75c86762a50a5ce981cdb33e59 master
git_repo_checkout_branch "../../../CS/MuPDF/thirdparty/mujs" 2704d8835b65b354b2411f560f9c90aa3842492a mupdf
git_repo_checkout_branch "../../../CS/MuPDF/thirdparty/openjpeg" af68b4775b4676712b6cd7773711e23733ff2188 bleeding_edge
git_repo_checkout_branch "../../../CS/MuPDF/thirdparty/tesseract" 403dc42fc8384f0a8049cb96d407b2a02e3cbf3e master
git_repo_checkout_branch "../../../CS/MuPDF/thirdparty/zlib" c8d407e68bf40d4322c4fc25850ba9629c7a5761 master

# --- all done ---

popd                                                                           2> /dev/null  > /dev/null

