#! /bin/bash
#
# Generated by the utility: ../../../util/collect_git_checked_out_branch_recusively.sh 
#
# Checkout each git repository to the given branch/commit or list them
#

mode=h;
while getopts ":hlc" opt ; do
  #echo opt+arg = "$opt$OPTARG"
  case "$opt$OPTARG" in
  l )
    mode=h;
    ;;

  c )
    mode=c;
    ;;

  r )
    mode=r;
    ;;

  * )
    cat <<EOH
checkout_to_known_git_branches_recursive.sh options

Options:

-h      : print this help 
-l      : LIST the branch/commit for each git repository (directory) registered in this script.
-c      : CHECKOUT each git repository to the BRANCH registered in this script.
-r      : CHECKOUT/REVERT each git repository to the COMMIT registered in this script.

Note:

Use the '-r' option to set each repository to an exact commit position, which is useful if,
for instance, you wish to reproduce this registered previous software state (which may 
represent a software release) which you wish to analyze/debug.

EOH
    exit 1;
    ;;
  esac
done

if test "$mode" = "h" ; then
  cat <<EOH

Git repository directory                    :: commit hash                         / branch name
--------------------------------------------::--------------------------------------------------
EOH
fi



# args: DIR COMMIT [BRANCH]
git_repo_checkout_branch() {
  if test "$mode" = "c" || test "$mode" = "r" ; then
    if test -d "$1" ; then
      pushd "$1"                                                               2> /dev/null  > /dev/null
      if test "$mode" = "c" ; then
        if test -n "$3" ; then
          # make sure the branch is created locally and is a tracking branch:
          git branch --track "$3" "remotes/origin/$3"                            2> /dev/null  > /dev/null
          git checkout "$3"
        else
          git checkout master
        fi
      else
        git checkout "$2"
      fi
      popd                                                                     2> /dev/null  > /dev/null
    fi
  else
    if test -d "$1" ; then
      printf "%-43s :: %s / %s\n" "$1" "$2" "$3"
    else
      printf "%-43s :: %s / %s\n" "[DIRECTORY DOES NOT EXIST!] $1" "$2" "$3"
    fi
  fi
}


#
# Make sure we switch to the utility directory as all the relative paths for the repositories
# are based off that path!
#
pushd $(dirname $0)                                                            2> /dev/null  > /dev/null



#
# The registered repositories:
#

git_repo_checkout_branch "../thirdparty/curl" e438f3f36b68eb66cc6f53da779afb06988b1d6d mupdf
git_repo_checkout_branch "../thirdparty/freeglut" 21f059e4b1489d3fab3f94a65ebebc0f80886237 master
git_repo_checkout_branch "../thirdparty/freetype" 791a92746fd86d9d88367a128607497192cfe0eb mupdf
git_repo_checkout_branch "../thirdparty/harfbuzz" c43c10eba9ba395097c9c4cf47400056c3c0b090 harfbuzz
git_repo_checkout_branch "../thirdparty/jbig2dec" 28d7e993bae56174776f59eb00c6a4bbaa1235e4 master
git_repo_checkout_branch "../thirdparty/lcms2" f601ea3be6384db5397c530fb59ac3ed10a9bc58 mupdf
git_repo_checkout_branch "../thirdparty/libjpeg" 9a532f2d544f218c8a237ebb56d09e24161c196c master
git_repo_checkout_branch "../thirdparty/mujs" ae526960aa8b4fa75797147e81012bac789610e0 mupdf
git_repo_checkout_branch "../thirdparty/openjpeg" e763e243bbadf43e97d7e3875f4c8a300fbac269 master
git_repo_checkout_branch "../thirdparty/zlib" dea93d29387877a582fb57139378af312acd5400 master

# --- all done ---

popd                                                                           2> /dev/null  > /dev/null

